{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Stores user-specific data to personalize the AI experience.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "name": {
          "type": "string",
          "description": "The user's name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "preferences": {
          "type": "string",
          "description": "User preferences stored as a JSON string."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user profile was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the user profile was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "preferences",
        "createdAt",
        "updatedAt"
      ]
    },
    "ChatHistory": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChatHistory",
      "type": "object",
      "description": "Stores the history of conversations between the user and the AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ChatHistory entry."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N ChatHistory)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of the chat message.",
          "format": "date-time"
        },
        "userMessage": {
          "type": "string",
          "description": "The message sent by the user."
        },
        "aiResponse": {
          "type": "string",
          "description": "The response generated by the AI."
        }
      },
      "required": [
        "id",
        "userProfileId",
        "timestamp",
        "userMessage",
        "aiResponse"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. Each user has their own document. Path-based ownership is enforced using the 'userId' parameter.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, corresponding to their Firebase Authentication UID."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/chatHistory/{chatHistoryId}",
        "definition": {
          "entityName": "ChatHistory",
          "schema": {
            "$ref": "#/backend/entities/ChatHistory"
          },
          "description": "Stores chat history for a specific user. Path-based ownership is inherited from the parent 'users/{userId}' document.  Each chat history entry is associated with a user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, corresponding to their Firebase Authentication UID. This parameter is inherited from the parent document."
            },
            {
              "name": "chatHistoryId",
              "description": "The unique identifier for the chat history entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to store user profiles and chat history in a secure and scalable manner. User profiles are stored under the `/users/{userId}` path, ensuring path-based ownership and easy management of user-specific data. Chat history is stored as a subcollection under each user's profile (`/users/{userId}/chatHistory/{chatHistoryId}`), further enforcing ownership and providing a clear hierarchy. This design promotes Authorization Independence because access control can be determined solely by the path. Security rules can easily validate `request.auth.uid` against the `{userId}` path segment. The design supports the required QAPs by segregating user data (UserProfile and ChatHistory) based on the user ID. List operations are secure as they are scoped to the specific user's data."
  }
}