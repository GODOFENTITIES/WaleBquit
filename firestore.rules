/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model.
 *   Each user can only access their own profile data and chat sessions. No listing of all users is allowed.
 * @data_structure
 *   - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 *   - /users/{userId}/sessions/{sessionId}: Stores chat sessions owned by a specific user, accessible only by that user.
 * @key_security_decisions
 *   - Users can only access their own data; no cross-user data access is permitted.
 *   - User listing is explicitly denied to prevent unauthorized enumeration of user accounts.
 *   - Data structure enforces clear ownership via path-based access.
 * @denormalization_for_authorization N/A (path-based ownership is sufficient)
 * @structural_segregation User data is segregated under the /users/{userId} collection to ensure privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'hLTvxe0ElMhUKdU8AYBKbKJAZVw1' can create their own profile.
     * @allow (get, update, delete) User with ID 'hLTvxe0ElMhUKdU8AYBKbKJAZVw1' can read, update, and delete their own profile.
     * @deny (create) User with ID 'otherUserId' cannot create a profile with ID 'hLTvxe0ElMhUKdU8AYBKbKJAZVw1'.
     * @deny (get, update, delete) User with ID 'otherUserId' cannot read, update, or delete the profile of user 'hLTvxe0ElMhUKdU8AYBKbKJAZVw1'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to chat session documents within a user's profile.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (create, get, list, update, delete) User with ID 'hLTvxe0ElMhUKdU8AYBKbKJAZVw1' can create, read, list, update, and delete their own sessions.
     * @deny (create, get, list, update, delete) User with ID 'otherUserId' cannot create, read, list, update, or delete sessions for user 'hLTvxe0ElMhUKdU8AYBKbKJAZVw1'.
     * @principle Restricts access to a user's own chat sessions based on path-based ownership.
     */
    match /users/{userId}/sessions/{sessionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}